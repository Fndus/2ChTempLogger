
TempLoggerV1_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  00000ee6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000036  00008e1c  00000e1c  00000eb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000001  00803800  00803800  00000ee6  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000098  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000025f0  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b89  00000000  00000000  000035e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000733  00000000  00000000  00005169  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f4  00000000  00000000  0000589c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f57  00000000  00000000  00005a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000086d  00000000  00000000  000069e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00007254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	07 63       	ori	r16, 0x37	; 55
  7e:	42 36       	cpi	r20, 0x62	; 98
  80:	b7 9b       	sbis	0x16, 7	; 22
  82:	d8 a7       	std	Y+40, r29	; 0x28
  84:	1a 39       	cpi	r17, 0x9A	; 154
  86:	68 56       	subi	r22, 0x68	; 104
  88:	18 ae       	std	Y+56, r1	; 0x38
  8a:	ba ab       	std	Y+50, r27	; 0x32
  8c:	55 8c       	ldd	r5, Z+29	; 0x1d
  8e:	1d 3c       	cpi	r17, 0xCD	; 205
  90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  92:	57 63       	ori	r21, 0x37	; 55
  94:	bd 6d       	ori	r27, 0xDD	; 221
  96:	ed fd       	.word	0xfded	; ????
  98:	75 3e       	cpi	r23, 0xE5	; 229
  9a:	f6 17       	cp	r31, r22
  9c:	72 31       	cpi	r23, 0x12	; 18
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	08 00       	.word	0x0008	; ????
  a6:	00 00       	nop
  a8:	be 92       	st	-X, r11
  aa:	24 49       	sbci	r18, 0x94	; 148
  ac:	12 3e       	cpi	r17, 0xE2	; 226
  ae:	ab aa       	std	Y+51, r10	; 0x33
  b0:	aa 2a       	or	r10, r26
  b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
  b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
  b6:	4c 3e       	cpi	r20, 0xEC	; 236
  b8:	00 00       	nop
  ba:	00 80       	ld	r0, Z
  bc:	be ab       	std	Y+54, r27	; 0x36
  be:	aa aa       	std	Y+50, r10	; 0x32
  c0:	aa 3e       	cpi	r26, 0xEA	; 234
  c2:	00 00       	nop
  c4:	00 00       	nop
  c6:	bf 00       	.word	0x00bf	; ????
  c8:	00 00       	nop
  ca:	80 3f       	cpi	r24, 0xF0	; 240
  cc:	00 00       	nop
  ce:	00 00       	nop
  d0:	00 08       	sbc	r0, r0
  d2:	41 78       	andi	r20, 0x81	; 129
  d4:	d3 bb       	out	0x13, r29	; 19
  d6:	43 87       	std	Z+11, r20	; 0x0b
  d8:	d1 13       	cpse	r29, r17
  da:	3d 19       	sub	r19, r13
  dc:	0e 3c       	cpi	r16, 0xCE	; 206
  de:	c3 bd       	out	0x23, r28	; 35
  e0:	42 82       	std	Z+2, r4	; 0x02
  e2:	ad 2b       	or	r26, r29
  e4:	3e 68       	ori	r19, 0x8E	; 142
  e6:	ec 82       	std	Y+4, r14	; 0x04
  e8:	76 be       	out	0x36, r7	; 54
  ea:	d9 8f       	std	Y+25, r29	; 0x19
  ec:	e1 a9       	ldd	r30, Z+49	; 0x31
  ee:	3e 4c       	sbci	r19, 0xCE	; 206
  f0:	80 ef       	ldi	r24, 0xF0	; 240
  f2:	ff be       	out	0x3f, r15	; 63
  f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <__floatsisf+0x3e>
  f6:	ff 7f       	andi	r31, 0xFF	; 255
  f8:	3f 00       	.word	0x003f	; ????
  fa:	00 00       	nop
	...

000000fe <__ctors_end>:
  fe:	11 24       	eor	r1, r1
 100:	1f be       	out	0x3f, r1	; 63
 102:	cf ef       	ldi	r28, 0xFF	; 255
 104:	cd bf       	out	0x3d, r28	; 61
 106:	df e3       	ldi	r29, 0x3F	; 63
 108:	de bf       	out	0x3e, r29	; 62

0000010a <__do_clear_bss>:
 10a:	28 e3       	ldi	r18, 0x38	; 56
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b8 e3       	ldi	r27, 0x38	; 56
 110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
 112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
 114:	a1 30       	cpi	r26, 0x01	; 1
 116:	b2 07       	cpc	r27, r18
 118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
 11a:	0e 94 0f 03 	call	0x61e	; 0x61e <main>
 11e:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <USART0_init>:
		
}

void USART0_init(void)
{
	PORTMUX.CTRLB |= 0x05;									// alternative Pinbelegung für usart und spi
 126:	e0 e0       	ldi	r30, 0x00	; 0
 128:	f2 e0       	ldi	r31, 0x02	; 2
 12a:	81 81       	ldd	r24, Z+1	; 0x01
 12c:	85 60       	ori	r24, 0x05	; 5
 12e:	81 83       	std	Z+1, r24	; 0x01
	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600);			// set baud rate
 130:	a0 e0       	ldi	r26, 0x00	; 0
 132:	b8 e0       	ldi	r27, 0x08	; 8
 134:	8d e6       	ldi	r24, 0x6D	; 109
 136:	95 e0       	ldi	r25, 0x05	; 5
 138:	18 96       	adiw	r26, 0x08	; 8
 13a:	8d 93       	st	X+, r24
 13c:	9c 93       	st	X, r25
 13e:	19 97       	sbiw	r26, 0x09	; 9
	
	PORTA.DIR &= ~PIN2_bm;									// PA2 RXD INPUT
 140:	e0 e0       	ldi	r30, 0x00	; 0
 142:	f4 e0       	ldi	r31, 0x04	; 4
 144:	80 81       	ld	r24, Z
 146:	8b 7f       	andi	r24, 0xFB	; 251
 148:	80 83       	st	Z, r24
	PORTA.DIR |= PIN1_bm;									// PA1 TXD OUTPUT
 14a:	80 81       	ld	r24, Z
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24

	USART0.CTRLB |= USART_TXEN_bm	| USART_RXEN_bm;;		// enable transmitter + receiver
 150:	16 96       	adiw	r26, 0x06	; 6
 152:	8c 91       	ld	r24, X
 154:	16 97       	sbiw	r26, 0x06	; 6
 156:	80 6c       	ori	r24, 0xC0	; 192
 158:	16 96       	adiw	r26, 0x06	; 6
 15a:	8c 93       	st	X, r24
 15c:	08 95       	ret

0000015e <USART0_putc>:
}

void USART0_putc(char c)
{
	while (!(USART0.STATUS & USART_DREIF_bm))				// warten bis senden moeglich
 15e:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 162:	95 ff       	sbrs	r25, 5
 164:	fc cf       	rjmp	.-8      	; 0x15e <USART0_putc>
	{
		;
	}
	USART0.TXDATAL = c;										// zeichen auf schnittstelle schreiben
 166:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 16a:	08 95       	ret

0000016c <USART0_puts>:
}

void USART0_puts(char *str)
{
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
 17a:	07 c0       	rjmp	.+14     	; 0x18a <USART0_puts+0x1e>
	{
		USART0_putc(str[i]);
 17c:	f8 01       	movw	r30, r16
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	80 81       	ld	r24, Z
 184:	0e 94 af 00 	call	0x15e	; 0x15e <USART0_putc>
	USART0.TXDATAL = c;										// zeichen auf schnittstelle schreiben
}

void USART0_puts(char *str)
{
	for(size_t i = 0; i < strlen(str); i++)
 188:	21 96       	adiw	r28, 0x01	; 1
 18a:	f8 01       	movw	r30, r16
 18c:	01 90       	ld	r0, Z+
 18e:	00 20       	and	r0, r0
 190:	e9 f7       	brne	.-6      	; 0x18c <USART0_puts+0x20>
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	e0 1b       	sub	r30, r16
 196:	f1 0b       	sbc	r31, r17
 198:	ce 17       	cp	r28, r30
 19a:	df 07       	cpc	r29, r31
 19c:	78 f3       	brcs	.-34     	; 0x17c <USART0_puts+0x10>
	{
		USART0_putc(str[i]);
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	08 95       	ret

000001a8 <USART0_getc>:

char USART0_getc(void)
{
	while (!(USART0.STATUS & USART_RXCIF_bm))				// warten bis daten verfuegbar
 1a8:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 1ac:	88 23       	and	r24, r24
 1ae:	e4 f7       	brge	.-8      	; 0x1a8 <USART0_getc>
	{
		;
	}
	return USART0.RXDATAL;
 1b0:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__RODATA_PM_OFFSET__+0x7f8800>
}
 1b4:	08 95       	ret

000001b6 <Write_CH1>:
	Write_CH2(0x81,0x43);
}

void Write_CH1(unsigned char w_addr,unsigned char data)
{
	PORTC.OUTCLR = PIN3_bm;
 1b6:	98 e0       	ldi	r25, 0x08	; 8
 1b8:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__RODATA_PM_OFFSET__+0x7f8446>
	SPI0.DATA = w_addr;
 1bc:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
	while (!(SPI0.INTFLAGS & SPI_IF_bm)) 
 1c0:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 1c4:	88 23       	and	r24, r24
 1c6:	e4 f7       	brge	.-8      	; 0x1c0 <Write_CH1+0xa>
	{	
		;
	}
	SPI0.DATA = data;
 1c8:	60 93 24 08 	sts	0x0824, r22	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
	while (!(SPI0.INTFLAGS & SPI_IF_bm))
 1cc:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 1d0:	88 23       	and	r24, r24
 1d2:	e4 f7       	brge	.-8      	; 0x1cc <Write_CH1+0x16>
	{
		;
	}
	PORTC.OUTSET = PIN3_bm;
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__RODATA_PM_OFFSET__+0x7f8445>
 1da:	08 95       	ret

000001dc <Read_CH1>:
}

unsigned char Read_CH1(unsigned char r_addr)
{
	PORTC.OUTCLR = PIN3_bm;
 1dc:	98 e0       	ldi	r25, 0x08	; 8
 1de:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__RODATA_PM_OFFSET__+0x7f8446>
	SPI0.DATA = r_addr;
 1e2:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
	while (!(SPI0.INTFLAGS & SPI_IF_bm))
 1e6:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 1ea:	88 23       	and	r24, r24
 1ec:	e4 f7       	brge	.-8      	; 0x1e6 <Read_CH1+0xa>
	{
		;
	}
	SPI0.DATA = 0xFF;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
	while (!(SPI0.INTFLAGS & SPI_IF_bm))
 1f4:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 1f8:	88 23       	and	r24, r24
 1fa:	e4 f7       	brge	.-8      	; 0x1f4 <Read_CH1+0x18>
	{
		;
	}
	value = SPI0.DATA;
 1fc:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
 200:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	//USART0_sendChar(value);
	PORTC.OUTSET = PIN3_bm;
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__RODATA_PM_OFFSET__+0x7f8445>
	return value;
 20a:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
}
 20e:	08 95       	ret

00000210 <Write_CH2>:

void Write_CH2(unsigned char w_addr,unsigned char data)
{
	PORTB.OUTCLR = PIN1_bm;
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
	SPI0.DATA = w_addr;
 216:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
	while (!(SPI0.INTFLAGS & SPI_IF_bm))
 21a:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 21e:	88 23       	and	r24, r24
 220:	e4 f7       	brge	.-8      	; 0x21a <Write_CH2+0xa>
	{
		;
	}
	SPI0.DATA = data;
 222:	60 93 24 08 	sts	0x0824, r22	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
	while (!(SPI0.INTFLAGS & SPI_IF_bm))
 226:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 22a:	88 23       	and	r24, r24
 22c:	e4 f7       	brge	.-8      	; 0x226 <Write_CH2+0x16>
	{
		;
	}
	PORTB.OUTSET = PIN1_bm;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>
 234:	08 95       	ret

00000236 <init_SPI>:
	}
	return USART0.RXDATAL;
}

void init_SPI(void)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
	PORTMUX.CTRLB |= 0x05;										// Rout SPi to PortB
 23a:	e0 e0       	ldi	r30, 0x00	; 0
 23c:	f2 e0       	ldi	r31, 0x02	; 2
 23e:	81 81       	ldd	r24, Z+1	; 0x01
 240:	85 60       	ori	r24, 0x05	; 5
 242:	81 83       	std	Z+1, r24	; 0x01
	SPI0.CTRLA |= SPI_MASTER_bm;									// select master mode
 244:	e0 e2       	ldi	r30, 0x20	; 32
 246:	f8 e0       	ldi	r31, 0x08	; 8
 248:	80 81       	ld	r24, Z
 24a:	80 62       	ori	r24, 0x20	; 32
 24c:	80 83       	st	Z, r24
	SPI0.CTRLA |= SPI_PRESC_DIV16_gc;								// CLK_PER = 3333333 / 16
 24e:	80 81       	ld	r24, Z
 250:	82 60       	ori	r24, 0x02	; 2
 252:	80 83       	st	Z, r24
	SPI0.CTRLA |= SPI_CLK2X_bm;									// enable double clock speed
 254:	80 81       	ld	r24, Z
 256:	80 61       	ori	r24, 0x10	; 16
 258:	80 83       	st	Z, r24
	SPI0.CTRLB |= SPI_SSD_bm;										//
 25a:	81 81       	ldd	r24, Z+1	; 0x01
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	81 83       	std	Z+1, r24	; 0x01
	SPI0.CTRLB |= SPI_MODE_3_gc;
 260:	81 81       	ldd	r24, Z+1	; 0x01
 262:	83 60       	ori	r24, 0x03	; 3
 264:	81 83       	std	Z+1, r24	; 0x01
	//SPI0.CTRLA |= SPI_DORD_bm;									// LSB first
	SPI0.CTRLA |= SPI_ENABLE_bm;									// enable spi
 266:	80 81       	ld	r24, Z
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	80 83       	st	Z, r24
	
	PORTC.DIRCLR = PIN1_bm;											// MISO channel input
 26c:	a0 e4       	ldi	r26, 0x40	; 64
 26e:	b4 e0       	ldi	r27, 0x04	; 4
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	12 96       	adiw	r26, 0x02	; 2
 274:	8c 93       	st	X, r24
 276:	12 97       	sbiw	r26, 0x02	; 2
	//PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
	PORTC.DIRSET = PIN2_bm;											// MOSI channel output
 278:	94 e0       	ldi	r25, 0x04	; 4
 27a:	11 96       	adiw	r26, 0x01	; 1
 27c:	9c 93       	st	X, r25
 27e:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.DIRSET = PIN0_bm;											// SCK channel output
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	11 96       	adiw	r26, 0x01	; 1
 284:	9c 93       	st	X, r25
 286:	11 97       	sbiw	r26, 0x01	; 1
	PORTC.DIRSET = PIN3_bm;											// SS0 channel output
 288:	98 e0       	ldi	r25, 0x08	; 8
 28a:	11 96       	adiw	r26, 0x01	; 1
 28c:	9c 93       	st	X, r25
 28e:	11 97       	sbiw	r26, 0x01	; 1
	PORTB.DIRSET = PIN1_bm;											// SS1 output
 290:	c0 e2       	ldi	r28, 0x20	; 32
 292:	d4 e0       	ldi	r29, 0x04	; 4
 294:	89 83       	std	Y+1, r24	; 0x01
	
	PORTC.OUTSET = PIN3_bm;											// ss0 high
 296:	15 96       	adiw	r26, 0x05	; 5
 298:	9c 93       	st	X, r25
	PORTB.OUTSET = PIN1_bm;											// ss1 high
 29a:	8d 83       	std	Y+5, r24	; 0x05
	
	SPI0.DATA;														// empty spi
 29c:	84 81       	ldd	r24, Z+4	; 0x04
	
	Write_CH1(0x80,0x80);
 29e:	60 e8       	ldi	r22, 0x80	; 128
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Write_CH1>
	Write_CH1(0x81,0x43);
 2a6:	63 e4       	ldi	r22, 0x43	; 67
 2a8:	81 e8       	ldi	r24, 0x81	; 129
 2aa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <Write_CH1>
	Write_CH2(0x80,0x80);
 2ae:	60 e8       	ldi	r22, 0x80	; 128
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	0e 94 08 01 	call	0x210	; 0x210 <Write_CH2>
	Write_CH2(0x81,0x43);
 2b6:	63 e4       	ldi	r22, 0x43	; 67
 2b8:	81 e8       	ldi	r24, 0x81	; 129
 2ba:	0e 94 08 01 	call	0x210	; 0x210 <Write_CH2>
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <Read_CH2>:
	PORTB.OUTSET = PIN1_bm;
}

unsigned char Read_CH2(unsigned char r_addr)
{
	PORTB.OUTCLR = PIN1_bm;
 2c4:	92 e0       	ldi	r25, 0x02	; 2
 2c6:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
	SPI0.DATA = r_addr;
 2ca:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
	while (!(SPI0.INTFLAGS & SPI_IF_bm))
 2ce:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 2d2:	88 23       	and	r24, r24
 2d4:	e4 f7       	brge	.-8      	; 0x2ce <Read_CH2+0xa>
	{
		;
	}
	SPI0.DATA = 0xFF;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
	while (!(SPI0.INTFLAGS & SPI_IF_bm))
 2dc:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
 2e0:	88 23       	and	r24, r24
 2e2:	e4 f7       	brge	.-8      	; 0x2dc <Read_CH2+0x18>
	{
		;
	}
	value = SPI0.DATA;
 2e4:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
 2e8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__DATA_REGION_ORIGIN__>
	//USART0_sendChar(value);
	PORTB.OUTSET = PIN1_bm;
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>
	return value;
 2f2:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
}
 2f6:	08 95       	ret

000002f8 <reverse>:
	USART0_puts("\r\n");
}

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
 2f8:	61 50       	subi	r22, 0x01	; 1
 2fa:	71 09       	sbc	r23, r1
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
	while (i < j) {
 300:	0e c0       	rjmp	.+28     	; 0x31e <reverse+0x26>
		temp = str[i];
 302:	dc 01       	movw	r26, r24
 304:	a2 0f       	add	r26, r18
 306:	b3 1f       	adc	r27, r19
 308:	4c 91       	ld	r20, X
		str[i] = str[j];
 30a:	fc 01       	movw	r30, r24
 30c:	e6 0f       	add	r30, r22
 30e:	f7 1f       	adc	r31, r23
 310:	50 81       	ld	r21, Z
 312:	5c 93       	st	X, r21
		str[j] = temp;
 314:	40 83       	st	Z, r20
		i++;
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
		j--;
 31a:	61 50       	subi	r22, 0x01	; 1
 31c:	71 09       	sbc	r23, r1
}

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
 31e:	26 17       	cp	r18, r22
 320:	37 07       	cpc	r19, r23
 322:	7c f3       	brlt	.-34     	; 0x302 <reverse+0xa>
		str[i] = str[j];
		str[j] = temp;
		i++;
		j--;
	}
}
 324:	08 95       	ret

00000326 <intToStr>:

int intToStr(int x, char str[], int d)
{
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	8b 01       	movw	r16, r22
 330:	9a 01       	movw	r18, r20
	int i = 0;
 332:	c0 e0       	ldi	r28, 0x00	; 0
 334:	d0 e0       	ldi	r29, 0x00	; 0
	while (x) {
 336:	0c c0       	rjmp	.+24     	; 0x350 <intToStr+0x2a>
		str[i++] = (x % 10) + '0';
 338:	f8 01       	movw	r30, r16
 33a:	ec 0f       	add	r30, r28
 33c:	fd 1f       	adc	r31, r29
 33e:	6a e0       	ldi	r22, 0x0A	; 10
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divmodhi4>
 346:	80 5d       	subi	r24, 0xD0	; 208
 348:	80 83       	st	Z, r24
		x = x / 10;
 34a:	86 2f       	mov	r24, r22
 34c:	97 2f       	mov	r25, r23

int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
		str[i++] = (x % 10) + '0';
 34e:	21 96       	adiw	r28, 0x01	; 1
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
 350:	00 97       	sbiw	r24, 0x00	; 0
 352:	91 f7       	brne	.-28     	; 0x338 <intToStr+0x12>
 354:	06 c0       	rjmp	.+12     	; 0x362 <intToStr+0x3c>
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
 356:	f8 01       	movw	r30, r16
 358:	ec 0f       	add	r30, r28
 35a:	fd 1f       	adc	r31, r29
 35c:	80 e3       	ldi	r24, 0x30	; 48
 35e:	80 83       	st	Z, r24
 360:	21 96       	adiw	r28, 0x01	; 1
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 362:	c2 17       	cp	r28, r18
 364:	d3 07       	cpc	r29, r19
 366:	bc f3       	brlt	.-18     	; 0x356 <intToStr+0x30>
	str[i++] = '0';
	
	reverse(str, i);
 368:	be 01       	movw	r22, r28
 36a:	c8 01       	movw	r24, r16
 36c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <reverse>
	str[i] = '\0';
 370:	f8 01       	movw	r30, r16
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	10 82       	st	Z, r1
	return i;
}
 378:	ce 01       	movw	r24, r28
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <ftoa>:

void ftoa(float n, char* res, int afterpoint)
{
 384:	4f 92       	push	r4
 386:	5f 92       	push	r5
 388:	6f 92       	push	r6
 38a:	7f 92       	push	r7
 38c:	8f 92       	push	r8
 38e:	9f 92       	push	r9
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	2b 01       	movw	r4, r22
 3a2:	3c 01       	movw	r6, r24
 3a4:	7a 01       	movw	r14, r20
 3a6:	89 01       	movw	r16, r18
	// Extract integer part
	int ipart = (int)n;
 3a8:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
 3ac:	4b 01       	movw	r8, r22
 3ae:	5c 01       	movw	r10, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
 3b0:	07 2e       	mov	r0, r23
 3b2:	00 0c       	add	r0, r0
 3b4:	88 0b       	sbc	r24, r24
 3b6:	99 0b       	sbc	r25, r25
 3b8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatsisf>
 3bc:	9b 01       	movw	r18, r22
 3be:	ac 01       	movw	r20, r24
 3c0:	c3 01       	movw	r24, r6
 3c2:	b2 01       	movw	r22, r4
 3c4:	0e 94 46 03 	call	0x68c	; 0x68c <__subsf3>
 3c8:	2b 01       	movw	r4, r22
 3ca:	3c 01       	movw	r6, r24
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	b7 01       	movw	r22, r14
 3d2:	c4 01       	movw	r24, r8
 3d4:	0e 94 93 01 	call	0x326	; 0x326 <intToStr>
 3d8:	ec 01       	movw	r28, r24
	
	// check for display option after point
	if (afterpoint != 0) {
 3da:	01 15       	cp	r16, r1
 3dc:	11 05       	cpc	r17, r1
 3de:	29 f1       	breq	.+74     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		res[i] = '.'; // add dot
 3e0:	f7 01       	movw	r30, r14
 3e2:	e8 0f       	add	r30, r24
 3e4:	f9 1f       	adc	r31, r25
 3e6:	8e e2       	ldi	r24, 0x2E	; 46
 3e8:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 3ea:	b8 01       	movw	r22, r16
 3ec:	01 2e       	mov	r0, r17
 3ee:	00 0c       	add	r0, r0
 3f0:	88 0b       	sbc	r24, r24
 3f2:	99 0b       	sbc	r25, r25
 3f4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatsisf>
 3f8:	9b 01       	movw	r18, r22
 3fa:	ac 01       	movw	r20, r24
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	80 e2       	ldi	r24, 0x20	; 32
 402:	91 e4       	ldi	r25, 0x41	; 65
 404:	0e 94 56 05 	call	0xaac	; 0xaac <pow>
 408:	9b 01       	movw	r18, r22
 40a:	ac 01       	movw	r20, r24
 40c:	c3 01       	movw	r24, r6
 40e:	b2 01       	movw	r22, r4
 410:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
 414:	21 96       	adiw	r28, 0x01	; 1
 416:	ce 0d       	add	r28, r14
 418:	df 1d       	adc	r29, r15
 41a:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
 41e:	dc 01       	movw	r26, r24
 420:	cb 01       	movw	r24, r22
 422:	a8 01       	movw	r20, r16
 424:	be 01       	movw	r22, r28
 426:	0e 94 93 01 	call	0x326	; 0x326 <intToStr>
	}
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	bf 90       	pop	r11
 438:	af 90       	pop	r10
 43a:	9f 90       	pop	r9
 43c:	8f 90       	pop	r8
 43e:	7f 90       	pop	r7
 440:	6f 90       	pop	r6
 442:	5f 90       	pop	r5
 444:	4f 90       	pop	r4
 446:	08 95       	ret

00000448 <Read_temp_Ch1>:
	PORTB.OUTSET = PIN1_bm;
	return value;
}

void Read_temp_Ch1(void)
{
 448:	cf 92       	push	r12
 44a:	df 92       	push	r13
 44c:	ef 92       	push	r14
 44e:	ff 92       	push	r15
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	64 97       	sbiw	r28, 0x14	; 20
 45a:	cd bf       	out	0x3d, r28	; 61
 45c:	de bf       	out	0x3e, r29	; 62
	char s[20];
	double temp = 0;
	float t1 =0;
	t1 = Read_CH1(0x0C);
 45e:	8c e0       	ldi	r24, 0x0C	; 12
 460:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Read_CH1>
 464:	68 2f       	mov	r22, r24
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
	temp = t1*16;
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	40 e8       	ldi	r20, 0x80	; 128
 476:	51 e4       	ldi	r21, 0x41	; 65
 478:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__mulsf3>
 47c:	6b 01       	movw	r12, r22
 47e:	7c 01       	movw	r14, r24
	t1 = Read_CH1(0x0D);
 480:	8d e0       	ldi	r24, 0x0D	; 13
 482:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Read_CH1>
 486:	68 2f       	mov	r22, r24
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
	temp = temp + t1*0.06225586;
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	4f e7       	ldi	r20, 0x7F	; 127
 498:	5d e3       	ldi	r21, 0x3D	; 61
 49a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__mulsf3>
 49e:	9b 01       	movw	r18, r22
 4a0:	ac 01       	movw	r20, r24
 4a2:	c7 01       	movw	r24, r14
 4a4:	b6 01       	movw	r22, r12
 4a6:	0e 94 47 03 	call	0x68e	; 0x68e <__addsf3>
 4aa:	6b 01       	movw	r12, r22
 4ac:	7c 01       	movw	r14, r24
	t1 = Read_CH1(0x0E);
 4ae:	8e e0       	ldi	r24, 0x0E	; 14
 4b0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Read_CH1>
 4b4:	68 2f       	mov	r22, r24
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
	temp = temp+ t1/4095;
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 ef       	ldi	r19, 0xF0	; 240
 4c4:	4f e7       	ldi	r20, 0x7F	; 127
 4c6:	55 e4       	ldi	r21, 0x45	; 69
 4c8:	0e 94 b3 03 	call	0x766	; 0x766 <__divsf3>
 4cc:	9b 01       	movw	r18, r22
 4ce:	ac 01       	movw	r20, r24
 4d0:	c7 01       	movw	r24, r14
 4d2:	b6 01       	movw	r22, r12
 4d4:	0e 94 47 03 	call	0x68e	; 0x68e <__addsf3>
	ftoa(temp,s,1);
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	ae 01       	movw	r20, r28
 4de:	4f 5f       	subi	r20, 0xFF	; 255
 4e0:	5f 4f       	sbci	r21, 0xFF	; 255
 4e2:	0e 94 c2 01 	call	0x384	; 0x384 <ftoa>
	USART0_puts(s);
 4e6:	ce 01       	movw	r24, r28
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	0e 94 b6 00 	call	0x16c	; 0x16c <USART0_puts>
	USART0_puts("\r\n");
 4ee:	8a e2       	ldi	r24, 0x2A	; 42
 4f0:	9e e8       	ldi	r25, 0x8E	; 142
 4f2:	0e 94 b6 00 	call	0x16c	; 0x16c <USART0_puts>
}
 4f6:	64 96       	adiw	r28, 0x14	; 20
 4f8:	cd bf       	out	0x3d, r28	; 61
 4fa:	de bf       	out	0x3e, r29	; 62
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	ff 90       	pop	r15
 502:	ef 90       	pop	r14
 504:	df 90       	pop	r13
 506:	cf 90       	pop	r12
 508:	08 95       	ret

0000050a <Read_temp_Ch2>:

void Read_temp_Ch2(void)
{
 50a:	cf 92       	push	r12
 50c:	df 92       	push	r13
 50e:	ef 92       	push	r14
 510:	ff 92       	push	r15
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	cd b7       	in	r28, 0x3d	; 61
 518:	de b7       	in	r29, 0x3e	; 62
 51a:	64 97       	sbiw	r28, 0x14	; 20
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	de bf       	out	0x3e, r29	; 62
	char s[20];
	double temp = 0;
	float t1 =0;
	t1 = Read_CH2(0x0C);
 520:	8c e0       	ldi	r24, 0x0C	; 12
 522:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Read_CH2>
 526:	68 2f       	mov	r22, r24
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
	temp = t1*16;
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	40 e8       	ldi	r20, 0x80	; 128
 538:	51 e4       	ldi	r21, 0x41	; 65
 53a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__mulsf3>
 53e:	6b 01       	movw	r12, r22
 540:	7c 01       	movw	r14, r24
	t1 = Read_CH2(0x0D);
 542:	8d e0       	ldi	r24, 0x0D	; 13
 544:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Read_CH2>
 548:	68 2f       	mov	r22, r24
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
	temp = temp + t1*0.06225586;
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	4f e7       	ldi	r20, 0x7F	; 127
 55a:	5d e3       	ldi	r21, 0x3D	; 61
 55c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__mulsf3>
 560:	9b 01       	movw	r18, r22
 562:	ac 01       	movw	r20, r24
 564:	c7 01       	movw	r24, r14
 566:	b6 01       	movw	r22, r12
 568:	0e 94 47 03 	call	0x68e	; 0x68e <__addsf3>
 56c:	6b 01       	movw	r12, r22
 56e:	7c 01       	movw	r14, r24
	t1 = Read_CH2(0x0E);
 570:	8e e0       	ldi	r24, 0x0E	; 14
 572:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Read_CH2>
 576:	68 2f       	mov	r22, r24
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
	temp = temp+ t1/4095;
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	30 ef       	ldi	r19, 0xF0	; 240
 586:	4f e7       	ldi	r20, 0x7F	; 127
 588:	55 e4       	ldi	r21, 0x45	; 69
 58a:	0e 94 b3 03 	call	0x766	; 0x766 <__divsf3>
 58e:	9b 01       	movw	r18, r22
 590:	ac 01       	movw	r20, r24
 592:	c7 01       	movw	r24, r14
 594:	b6 01       	movw	r22, r12
 596:	0e 94 47 03 	call	0x68e	; 0x68e <__addsf3>
	ftoa(temp,s,1);
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	ae 01       	movw	r20, r28
 5a0:	4f 5f       	subi	r20, 0xFF	; 255
 5a2:	5f 4f       	sbci	r21, 0xFF	; 255
 5a4:	0e 94 c2 01 	call	0x384	; 0x384 <ftoa>
	USART0_puts(s);
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	0e 94 b6 00 	call	0x16c	; 0x16c <USART0_puts>
	USART0_puts("\r\n");
 5b0:	8a e2       	ldi	r24, 0x2A	; 42
 5b2:	9e e8       	ldi	r25, 0x8E	; 142
 5b4:	0e 94 b6 00 	call	0x16c	; 0x16c <USART0_puts>
}
 5b8:	64 96       	adiw	r28, 0x14	; 20
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	de bf       	out	0x3e, r29	; 62
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	ff 90       	pop	r15
 5c4:	ef 90       	pop	r14
 5c6:	df 90       	pop	r13
 5c8:	cf 90       	pop	r12
 5ca:	08 95       	ret

000005cc <UserCommands>:
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
}

void UserCommands(char *command)
{
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	ec 01       	movw	r28, r24
	if(strcmp(command, "ON") == 0)
 5d2:	6c e1       	ldi	r22, 0x1C	; 28
 5d4:	7e e8       	ldi	r23, 0x8E	; 142
 5d6:	0e 94 03 07 	call	0xe06	; 0xe06 <strcmp>
 5da:	89 2b       	or	r24, r25
 5dc:	29 f4       	brne	.+10     	; 0x5e8 <UserCommands+0x1c>
	{
		USART0_puts("OK, LED ON.\r\n");
 5de:	8f e1       	ldi	r24, 0x1F	; 31
 5e0:	9e e8       	ldi	r25, 0x8E	; 142
 5e2:	0e 94 b6 00 	call	0x16c	; 0x16c <USART0_puts>
 5e6:	18 c0       	rjmp	.+48     	; 0x618 <UserCommands+0x4c>
	}
	else if(strcmp(command, "TempCh1") == 0)
 5e8:	6d e2       	ldi	r22, 0x2D	; 45
 5ea:	7e e8       	ldi	r23, 0x8E	; 142
 5ec:	ce 01       	movw	r24, r28
 5ee:	0e 94 03 07 	call	0xe06	; 0xe06 <strcmp>
 5f2:	89 2b       	or	r24, r25
 5f4:	19 f4       	brne	.+6      	; 0x5fc <UserCommands+0x30>
	{
		Read_temp_Ch1();
 5f6:	0e 94 24 02 	call	0x448	; 0x448 <Read_temp_Ch1>
 5fa:	0e c0       	rjmp	.+28     	; 0x618 <UserCommands+0x4c>
	}
	else if(strcmp(command, "TempCh2") == 0)
 5fc:	65 e3       	ldi	r22, 0x35	; 53
 5fe:	7e e8       	ldi	r23, 0x8E	; 142
 600:	ce 01       	movw	r24, r28
 602:	0e 94 03 07 	call	0xe06	; 0xe06 <strcmp>
 606:	89 2b       	or	r24, r25
 608:	19 f4       	brne	.+6      	; 0x610 <UserCommands+0x44>
	{
		Read_temp_Ch2();
 60a:	0e 94 85 02 	call	0x50a	; 0x50a <Read_temp_Ch2>
 60e:	04 c0       	rjmp	.+8      	; 0x618 <UserCommands+0x4c>
	}
	else 
    {
        USART0_puts("Incorrect command.\r\n");
 610:	8d e3       	ldi	r24, 0x3D	; 61
 612:	9e e8       	ldi	r25, 0x8E	; 142
 614:	0e 94 b6 00 	call	0x16c	; 0x16c <USART0_puts>
    }
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

0000061e <main>:
void ftoa(float n, char* res, int afterpoint);
int intToStr(int x, char str[], int d);
void reverse(char* str, int len);

int main(void)
{
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
 626:	e2 97       	sbiw	r28, 0x32	; 50
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	de bf       	out	0x3e, r29	; 62
	//a = USART0_getc();
	//USART0_puts(itoa(i,s,10));							// i = intvariable, s=string, 10 = Dezimalsystem
	//USART0_putc(a);
	//_delay_ms(1000);
	
	USART0_init();
 62c:	0e 94 93 00 	call	0x126	; 0x126 <USART0_init>
	init_SPI();
 630:	0e 94 1b 01 	call	0x236	; 0x236 <init_SPI>
void ftoa(float n, char* res, int afterpoint);
int intToStr(int x, char str[], int d);
void reverse(char* str, int len);

int main(void)
{
 634:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t index = 0;
	char c;
	//_delay_ms(1000);
    while (1)												// zeichenkette bis 0x0D einlesen und befehl ausfueren 
    {	
		c = USART0_getc();
 636:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <USART0_getc>
		if(c != 0x0D && c != 0x0A)
 63a:	8d 30       	cpi	r24, 0x0D	; 13
 63c:	c9 f0       	breq	.+50     	; 0x670 <main+0x52>
 63e:	8a 30       	cpi	r24, 0x0A	; 10
 640:	b9 f0       	breq	.+46     	; 0x670 <main+0x52>
		{
			command[index++] = c;
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	91 0f       	add	r25, r17
 646:	de 01       	movw	r26, r28
 648:	11 96       	adiw	r26, 0x01	; 1
 64a:	fd 01       	movw	r30, r26
 64c:	e1 0f       	add	r30, r17
 64e:	f1 1d       	adc	r31, r1
 650:	80 83       	st	Z, r24
			if(index > strlen(command))
 652:	29 2f       	mov	r18, r25
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	fd 01       	movw	r30, r26
 658:	01 90       	ld	r0, Z+
 65a:	00 20       	and	r0, r0
 65c:	e9 f7       	brne	.-6      	; 0x658 <main+0x3a>
 65e:	31 97       	sbiw	r30, 0x01	; 1
 660:	ea 1b       	sub	r30, r26
 662:	fb 0b       	sbc	r31, r27
 664:	e2 17       	cp	r30, r18
 666:	f3 07       	cpc	r31, r19
 668:	10 f0       	brcs	.+4      	; 0x66e <main+0x50>
    while (1)												// zeichenkette bis 0x0D einlesen und befehl ausfueren 
    {	
		c = USART0_getc();
		if(c != 0x0D && c != 0x0A)
		{
			command[index++] = c;
 66a:	19 2f       	mov	r17, r25
 66c:	01 c0       	rjmp	.+2      	; 0x670 <main+0x52>
			if(index > strlen(command))
			{
				index = 0;
 66e:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		
		if(c == 0x0D)
 670:	8d 30       	cpi	r24, 0x0D	; 13
 672:	09 f7       	brne	.-62     	; 0x636 <main+0x18>
		{
			command[index] = '\0';
 674:	e1 e0       	ldi	r30, 0x01	; 1
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	ec 0f       	add	r30, r28
 67a:	fd 1f       	adc	r31, r29
 67c:	e1 0f       	add	r30, r17
 67e:	f1 1d       	adc	r31, r1
 680:	10 82       	st	Z, r1
			index = 0;
			UserCommands(command);
 682:	ce 01       	movw	r24, r28
 684:	01 96       	adiw	r24, 0x01	; 1
 686:	0e 94 e6 02 	call	0x5cc	; 0x5cc <UserCommands>
 68a:	d4 cf       	rjmp	.-88     	; 0x634 <main+0x16>

0000068c <__subsf3>:
 68c:	50 58       	subi	r21, 0x80	; 128

0000068e <__addsf3>:
 68e:	bb 27       	eor	r27, r27
 690:	aa 27       	eor	r26, r26
 692:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__addsf3x>
 696:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
 69a:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
 69e:	38 f0       	brcs	.+14     	; 0x6ae <__addsf3+0x20>
 6a0:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
 6a4:	20 f0       	brcs	.+8      	; 0x6ae <__addsf3+0x20>
 6a6:	39 f4       	brne	.+14     	; 0x6b6 <__addsf3+0x28>
 6a8:	9f 3f       	cpi	r25, 0xFF	; 255
 6aa:	19 f4       	brne	.+6      	; 0x6b2 <__addsf3+0x24>
 6ac:	26 f4       	brtc	.+8      	; 0x6b6 <__addsf3+0x28>
 6ae:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>
 6b2:	0e f4       	brtc	.+2      	; 0x6b6 <__addsf3+0x28>
 6b4:	e0 95       	com	r30
 6b6:	e7 fb       	bst	r30, 7
 6b8:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>

000006bc <__addsf3x>:
 6bc:	e9 2f       	mov	r30, r25
 6be:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
 6c2:	58 f3       	brcs	.-42     	; 0x69a <__addsf3+0xc>
 6c4:	ba 17       	cp	r27, r26
 6c6:	62 07       	cpc	r22, r18
 6c8:	73 07       	cpc	r23, r19
 6ca:	84 07       	cpc	r24, r20
 6cc:	95 07       	cpc	r25, r21
 6ce:	20 f0       	brcs	.+8      	; 0x6d8 <__addsf3x+0x1c>
 6d0:	79 f4       	brne	.+30     	; 0x6f0 <__addsf3x+0x34>
 6d2:	a6 f5       	brtc	.+104    	; 0x73c <__addsf3x+0x80>
 6d4:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>
 6d8:	0e f4       	brtc	.+2      	; 0x6dc <__addsf3x+0x20>
 6da:	e0 95       	com	r30
 6dc:	0b 2e       	mov	r0, r27
 6de:	ba 2f       	mov	r27, r26
 6e0:	a0 2d       	mov	r26, r0
 6e2:	0b 01       	movw	r0, r22
 6e4:	b9 01       	movw	r22, r18
 6e6:	90 01       	movw	r18, r0
 6e8:	0c 01       	movw	r0, r24
 6ea:	ca 01       	movw	r24, r20
 6ec:	a0 01       	movw	r20, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	ff 27       	eor	r31, r31
 6f2:	59 1b       	sub	r21, r25
 6f4:	99 f0       	breq	.+38     	; 0x71c <__addsf3x+0x60>
 6f6:	59 3f       	cpi	r21, 0xF9	; 249
 6f8:	50 f4       	brcc	.+20     	; 0x70e <__addsf3x+0x52>
 6fa:	50 3e       	cpi	r21, 0xE0	; 224
 6fc:	68 f1       	brcs	.+90     	; 0x758 <__addsf3x+0x9c>
 6fe:	1a 16       	cp	r1, r26
 700:	f0 40       	sbci	r31, 0x00	; 0
 702:	a2 2f       	mov	r26, r18
 704:	23 2f       	mov	r18, r19
 706:	34 2f       	mov	r19, r20
 708:	44 27       	eor	r20, r20
 70a:	58 5f       	subi	r21, 0xF8	; 248
 70c:	f3 cf       	rjmp	.-26     	; 0x6f4 <__addsf3x+0x38>
 70e:	46 95       	lsr	r20
 710:	37 95       	ror	r19
 712:	27 95       	ror	r18
 714:	a7 95       	ror	r26
 716:	f0 40       	sbci	r31, 0x00	; 0
 718:	53 95       	inc	r21
 71a:	c9 f7       	brne	.-14     	; 0x70e <__addsf3x+0x52>
 71c:	7e f4       	brtc	.+30     	; 0x73c <__addsf3x+0x80>
 71e:	1f 16       	cp	r1, r31
 720:	ba 0b       	sbc	r27, r26
 722:	62 0b       	sbc	r22, r18
 724:	73 0b       	sbc	r23, r19
 726:	84 0b       	sbc	r24, r20
 728:	ba f0       	brmi	.+46     	; 0x758 <__addsf3x+0x9c>
 72a:	91 50       	subi	r25, 0x01	; 1
 72c:	a1 f0       	breq	.+40     	; 0x756 <__addsf3x+0x9a>
 72e:	ff 0f       	add	r31, r31
 730:	bb 1f       	adc	r27, r27
 732:	66 1f       	adc	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	c2 f7       	brpl	.-16     	; 0x72a <__addsf3x+0x6e>
 73a:	0e c0       	rjmp	.+28     	; 0x758 <__addsf3x+0x9c>
 73c:	ba 0f       	add	r27, r26
 73e:	62 1f       	adc	r22, r18
 740:	73 1f       	adc	r23, r19
 742:	84 1f       	adc	r24, r20
 744:	48 f4       	brcc	.+18     	; 0x758 <__addsf3x+0x9c>
 746:	87 95       	ror	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b7 95       	ror	r27
 74e:	f7 95       	ror	r31
 750:	9e 3f       	cpi	r25, 0xFE	; 254
 752:	08 f0       	brcs	.+2      	; 0x756 <__addsf3x+0x9a>
 754:	b0 cf       	rjmp	.-160    	; 0x6b6 <__addsf3+0x28>
 756:	93 95       	inc	r25
 758:	88 0f       	add	r24, r24
 75a:	08 f0       	brcs	.+2      	; 0x75e <__addsf3x+0xa2>
 75c:	99 27       	eor	r25, r25
 75e:	ee 0f       	add	r30, r30
 760:	97 95       	ror	r25
 762:	87 95       	ror	r24
 764:	08 95       	ret

00000766 <__divsf3>:
 766:	0e 94 c7 03 	call	0x78e	; 0x78e <__divsf3x>
 76a:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
 76e:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
 772:	58 f0       	brcs	.+22     	; 0x78a <__divsf3+0x24>
 774:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
 778:	40 f0       	brcs	.+16     	; 0x78a <__divsf3+0x24>
 77a:	29 f4       	brne	.+10     	; 0x786 <__divsf3+0x20>
 77c:	5f 3f       	cpi	r21, 0xFF	; 255
 77e:	29 f0       	breq	.+10     	; 0x78a <__divsf3+0x24>
 780:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
 784:	51 11       	cpse	r21, r1
 786:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
 78a:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>

0000078e <__divsf3x>:
 78e:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
 792:	68 f3       	brcs	.-38     	; 0x76e <__divsf3+0x8>

00000794 <__divsf3_pse>:
 794:	99 23       	and	r25, r25
 796:	b1 f3       	breq	.-20     	; 0x784 <__divsf3+0x1e>
 798:	55 23       	and	r21, r21
 79a:	91 f3       	breq	.-28     	; 0x780 <__divsf3+0x1a>
 79c:	95 1b       	sub	r25, r21
 79e:	55 0b       	sbc	r21, r21
 7a0:	bb 27       	eor	r27, r27
 7a2:	aa 27       	eor	r26, r26
 7a4:	62 17       	cp	r22, r18
 7a6:	73 07       	cpc	r23, r19
 7a8:	84 07       	cpc	r24, r20
 7aa:	38 f0       	brcs	.+14     	; 0x7ba <__divsf3_pse+0x26>
 7ac:	9f 5f       	subi	r25, 0xFF	; 255
 7ae:	5f 4f       	sbci	r21, 0xFF	; 255
 7b0:	22 0f       	add	r18, r18
 7b2:	33 1f       	adc	r19, r19
 7b4:	44 1f       	adc	r20, r20
 7b6:	aa 1f       	adc	r26, r26
 7b8:	a9 f3       	breq	.-22     	; 0x7a4 <__divsf3_pse+0x10>
 7ba:	35 d0       	rcall	.+106    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7bc:	0e 2e       	mov	r0, r30
 7be:	3a f0       	brmi	.+14     	; 0x7ce <__divsf3_pse+0x3a>
 7c0:	e0 e8       	ldi	r30, 0x80	; 128
 7c2:	32 d0       	rcall	.+100    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 7c4:	91 50       	subi	r25, 0x01	; 1
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	e6 95       	lsr	r30
 7ca:	00 1c       	adc	r0, r0
 7cc:	ca f7       	brpl	.-14     	; 0x7c0 <__divsf3_pse+0x2c>
 7ce:	2b d0       	rcall	.+86     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7d0:	fe 2f       	mov	r31, r30
 7d2:	29 d0       	rcall	.+82     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7d4:	66 0f       	add	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	88 1f       	adc	r24, r24
 7da:	bb 1f       	adc	r27, r27
 7dc:	26 17       	cp	r18, r22
 7de:	37 07       	cpc	r19, r23
 7e0:	48 07       	cpc	r20, r24
 7e2:	ab 07       	cpc	r26, r27
 7e4:	b0 e8       	ldi	r27, 0x80	; 128
 7e6:	09 f0       	breq	.+2      	; 0x7ea <__divsf3_pse+0x56>
 7e8:	bb 0b       	sbc	r27, r27
 7ea:	80 2d       	mov	r24, r0
 7ec:	bf 01       	movw	r22, r30
 7ee:	ff 27       	eor	r31, r31
 7f0:	93 58       	subi	r25, 0x83	; 131
 7f2:	5f 4f       	sbci	r21, 0xFF	; 255
 7f4:	3a f0       	brmi	.+14     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7f6:	9e 3f       	cpi	r25, 0xFE	; 254
 7f8:	51 05       	cpc	r21, r1
 7fa:	78 f0       	brcs	.+30     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7fc:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
 800:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
 804:	5f 3f       	cpi	r21, 0xFF	; 255
 806:	e4 f3       	brlt	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
 808:	98 3e       	cpi	r25, 0xE8	; 232
 80a:	d4 f3       	brlt	.-12     	; 0x800 <__DATA_REGION_LENGTH__>
 80c:	86 95       	lsr	r24
 80e:	77 95       	ror	r23
 810:	67 95       	ror	r22
 812:	b7 95       	ror	r27
 814:	f7 95       	ror	r31
 816:	9f 5f       	subi	r25, 0xFF	; 255
 818:	c9 f7       	brne	.-14     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 81a:	88 0f       	add	r24, r24
 81c:	91 1d       	adc	r25, r1
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	97 f9       	bld	r25, 7
 824:	08 95       	ret
 826:	e1 e0       	ldi	r30, 0x01	; 1
 828:	66 0f       	add	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	bb 1f       	adc	r27, r27
 830:	62 17       	cp	r22, r18
 832:	73 07       	cpc	r23, r19
 834:	84 07       	cpc	r24, r20
 836:	ba 07       	cpc	r27, r26
 838:	20 f0       	brcs	.+8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83a:	62 1b       	sub	r22, r18
 83c:	73 0b       	sbc	r23, r19
 83e:	84 0b       	sbc	r24, r20
 840:	ba 0b       	sbc	r27, r26
 842:	ee 1f       	adc	r30, r30
 844:	88 f7       	brcc	.-30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 846:	e0 95       	com	r30
 848:	08 95       	ret

0000084a <__fixsfsi>:
 84a:	0e 94 2c 04 	call	0x858	; 0x858 <__fixunssfsi>
 84e:	68 94       	set
 850:	b1 11       	cpse	r27, r1
 852:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
 856:	08 95       	ret

00000858 <__fixunssfsi>:
 858:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_splitA>
 85c:	88 f0       	brcs	.+34     	; 0x880 <__fixunssfsi+0x28>
 85e:	9f 57       	subi	r25, 0x7F	; 127
 860:	98 f0       	brcs	.+38     	; 0x888 <__fixunssfsi+0x30>
 862:	b9 2f       	mov	r27, r25
 864:	99 27       	eor	r25, r25
 866:	b7 51       	subi	r27, 0x17	; 23
 868:	b0 f0       	brcs	.+44     	; 0x896 <__fixunssfsi+0x3e>
 86a:	e1 f0       	breq	.+56     	; 0x8a4 <__fixunssfsi+0x4c>
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	1a f0       	brmi	.+6      	; 0x87c <__fixunssfsi+0x24>
 876:	ba 95       	dec	r27
 878:	c9 f7       	brne	.-14     	; 0x86c <__fixunssfsi+0x14>
 87a:	14 c0       	rjmp	.+40     	; 0x8a4 <__fixunssfsi+0x4c>
 87c:	b1 30       	cpi	r27, 0x01	; 1
 87e:	91 f0       	breq	.+36     	; 0x8a4 <__fixunssfsi+0x4c>
 880:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fp_zero>
 884:	b1 e0       	ldi	r27, 0x01	; 1
 886:	08 95       	ret
 888:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>
 88c:	67 2f       	mov	r22, r23
 88e:	78 2f       	mov	r23, r24
 890:	88 27       	eor	r24, r24
 892:	b8 5f       	subi	r27, 0xF8	; 248
 894:	39 f0       	breq	.+14     	; 0x8a4 <__fixunssfsi+0x4c>
 896:	b9 3f       	cpi	r27, 0xF9	; 249
 898:	cc f3       	brlt	.-14     	; 0x88c <__fixunssfsi+0x34>
 89a:	86 95       	lsr	r24
 89c:	77 95       	ror	r23
 89e:	67 95       	ror	r22
 8a0:	b3 95       	inc	r27
 8a2:	d9 f7       	brne	.-10     	; 0x89a <__fixunssfsi+0x42>
 8a4:	3e f4       	brtc	.+14     	; 0x8b4 <__fixunssfsi+0x5c>
 8a6:	90 95       	com	r25
 8a8:	80 95       	com	r24
 8aa:	70 95       	com	r23
 8ac:	61 95       	neg	r22
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	08 95       	ret

000008b6 <__floatunsisf>:
 8b6:	e8 94       	clt
 8b8:	09 c0       	rjmp	.+18     	; 0x8cc <__floatsisf+0x12>

000008ba <__floatsisf>:
 8ba:	97 fb       	bst	r25, 7
 8bc:	3e f4       	brtc	.+14     	; 0x8cc <__floatsisf+0x12>
 8be:	90 95       	com	r25
 8c0:	80 95       	com	r24
 8c2:	70 95       	com	r23
 8c4:	61 95       	neg	r22
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	99 23       	and	r25, r25
 8ce:	a9 f0       	breq	.+42     	; 0x8fa <__floatsisf+0x40>
 8d0:	f9 2f       	mov	r31, r25
 8d2:	96 e9       	ldi	r25, 0x96	; 150
 8d4:	bb 27       	eor	r27, r27
 8d6:	93 95       	inc	r25
 8d8:	f6 95       	lsr	r31
 8da:	87 95       	ror	r24
 8dc:	77 95       	ror	r23
 8de:	67 95       	ror	r22
 8e0:	b7 95       	ror	r27
 8e2:	f1 11       	cpse	r31, r1
 8e4:	f8 cf       	rjmp	.-16     	; 0x8d6 <__floatsisf+0x1c>
 8e6:	fa f4       	brpl	.+62     	; 0x926 <__floatsisf+0x6c>
 8e8:	bb 0f       	add	r27, r27
 8ea:	11 f4       	brne	.+4      	; 0x8f0 <__floatsisf+0x36>
 8ec:	60 ff       	sbrs	r22, 0
 8ee:	1b c0       	rjmp	.+54     	; 0x926 <__floatsisf+0x6c>
 8f0:	6f 5f       	subi	r22, 0xFF	; 255
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	16 c0       	rjmp	.+44     	; 0x926 <__floatsisf+0x6c>
 8fa:	88 23       	and	r24, r24
 8fc:	11 f0       	breq	.+4      	; 0x902 <__floatsisf+0x48>
 8fe:	96 e9       	ldi	r25, 0x96	; 150
 900:	11 c0       	rjmp	.+34     	; 0x924 <__floatsisf+0x6a>
 902:	77 23       	and	r23, r23
 904:	21 f0       	breq	.+8      	; 0x90e <__floatsisf+0x54>
 906:	9e e8       	ldi	r25, 0x8E	; 142
 908:	87 2f       	mov	r24, r23
 90a:	76 2f       	mov	r23, r22
 90c:	05 c0       	rjmp	.+10     	; 0x918 <__floatsisf+0x5e>
 90e:	66 23       	and	r22, r22
 910:	71 f0       	breq	.+28     	; 0x92e <__floatsisf+0x74>
 912:	96 e8       	ldi	r25, 0x86	; 134
 914:	86 2f       	mov	r24, r22
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	2a f0       	brmi	.+10     	; 0x926 <__floatsisf+0x6c>
 91c:	9a 95       	dec	r25
 91e:	66 0f       	add	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	da f7       	brpl	.-10     	; 0x91c <__floatsisf+0x62>
 926:	88 0f       	add	r24, r24
 928:	96 95       	lsr	r25
 92a:	87 95       	ror	r24
 92c:	97 f9       	bld	r25, 7
 92e:	08 95       	ret

00000930 <__fp_inf>:
 930:	97 f9       	bld	r25, 7
 932:	9f 67       	ori	r25, 0x7F	; 127
 934:	80 e8       	ldi	r24, 0x80	; 128
 936:	70 e0       	ldi	r23, 0x00	; 0
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	08 95       	ret

0000093c <__fp_nan>:
 93c:	9f ef       	ldi	r25, 0xFF	; 255
 93e:	80 ec       	ldi	r24, 0xC0	; 192
 940:	08 95       	ret

00000942 <__fp_pscA>:
 942:	00 24       	eor	r0, r0
 944:	0a 94       	dec	r0
 946:	16 16       	cp	r1, r22
 948:	17 06       	cpc	r1, r23
 94a:	18 06       	cpc	r1, r24
 94c:	09 06       	cpc	r0, r25
 94e:	08 95       	ret

00000950 <__fp_pscB>:
 950:	00 24       	eor	r0, r0
 952:	0a 94       	dec	r0
 954:	12 16       	cp	r1, r18
 956:	13 06       	cpc	r1, r19
 958:	14 06       	cpc	r1, r20
 95a:	05 06       	cpc	r0, r21
 95c:	08 95       	ret

0000095e <__fp_round>:
 95e:	09 2e       	mov	r0, r25
 960:	03 94       	inc	r0
 962:	00 0c       	add	r0, r0
 964:	11 f4       	brne	.+4      	; 0x96a <__fp_round+0xc>
 966:	88 23       	and	r24, r24
 968:	52 f0       	brmi	.+20     	; 0x97e <__fp_round+0x20>
 96a:	bb 0f       	add	r27, r27
 96c:	40 f4       	brcc	.+16     	; 0x97e <__fp_round+0x20>
 96e:	bf 2b       	or	r27, r31
 970:	11 f4       	brne	.+4      	; 0x976 <__fp_round+0x18>
 972:	60 ff       	sbrs	r22, 0
 974:	04 c0       	rjmp	.+8      	; 0x97e <__fp_round+0x20>
 976:	6f 5f       	subi	r22, 0xFF	; 255
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	08 95       	ret

00000980 <__fp_split3>:
 980:	57 fd       	sbrc	r21, 7
 982:	90 58       	subi	r25, 0x80	; 128
 984:	44 0f       	add	r20, r20
 986:	55 1f       	adc	r21, r21
 988:	59 f0       	breq	.+22     	; 0x9a0 <__fp_splitA+0x10>
 98a:	5f 3f       	cpi	r21, 0xFF	; 255
 98c:	71 f0       	breq	.+28     	; 0x9aa <__fp_splitA+0x1a>
 98e:	47 95       	ror	r20

00000990 <__fp_splitA>:
 990:	88 0f       	add	r24, r24
 992:	97 fb       	bst	r25, 7
 994:	99 1f       	adc	r25, r25
 996:	61 f0       	breq	.+24     	; 0x9b0 <__fp_splitA+0x20>
 998:	9f 3f       	cpi	r25, 0xFF	; 255
 99a:	79 f0       	breq	.+30     	; 0x9ba <__fp_splitA+0x2a>
 99c:	87 95       	ror	r24
 99e:	08 95       	ret
 9a0:	12 16       	cp	r1, r18
 9a2:	13 06       	cpc	r1, r19
 9a4:	14 06       	cpc	r1, r20
 9a6:	55 1f       	adc	r21, r21
 9a8:	f2 cf       	rjmp	.-28     	; 0x98e <__fp_split3+0xe>
 9aa:	46 95       	lsr	r20
 9ac:	f1 df       	rcall	.-30     	; 0x990 <__fp_splitA>
 9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <__fp_splitA+0x30>
 9b0:	16 16       	cp	r1, r22
 9b2:	17 06       	cpc	r1, r23
 9b4:	18 06       	cpc	r1, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	f1 cf       	rjmp	.-30     	; 0x99c <__fp_splitA+0xc>
 9ba:	86 95       	lsr	r24
 9bc:	71 05       	cpc	r23, r1
 9be:	61 05       	cpc	r22, r1
 9c0:	08 94       	sec
 9c2:	08 95       	ret

000009c4 <__fp_zero>:
 9c4:	e8 94       	clt

000009c6 <__fp_szero>:
 9c6:	bb 27       	eor	r27, r27
 9c8:	66 27       	eor	r22, r22
 9ca:	77 27       	eor	r23, r23
 9cc:	cb 01       	movw	r24, r22
 9ce:	97 f9       	bld	r25, 7
 9d0:	08 95       	ret

000009d2 <__mulsf3>:
 9d2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3x>
 9d6:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>
 9da:	0e 94 a1 04 	call	0x942	; 0x942 <__fp_pscA>
 9de:	38 f0       	brcs	.+14     	; 0x9ee <__mulsf3+0x1c>
 9e0:	0e 94 a8 04 	call	0x950	; 0x950 <__fp_pscB>
 9e4:	20 f0       	brcs	.+8      	; 0x9ee <__mulsf3+0x1c>
 9e6:	95 23       	and	r25, r21
 9e8:	11 f0       	breq	.+4      	; 0x9ee <__mulsf3+0x1c>
 9ea:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
 9ee:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>
 9f2:	11 24       	eor	r1, r1
 9f4:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>

000009f8 <__mulsf3x>:
 9f8:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_split3>
 9fc:	70 f3       	brcs	.-36     	; 0x9da <__mulsf3+0x8>

000009fe <__mulsf3_pse>:
 9fe:	95 9f       	mul	r25, r21
 a00:	c1 f3       	breq	.-16     	; 0x9f2 <__mulsf3+0x20>
 a02:	95 0f       	add	r25, r21
 a04:	50 e0       	ldi	r21, 0x00	; 0
 a06:	55 1f       	adc	r21, r21
 a08:	62 9f       	mul	r22, r18
 a0a:	f0 01       	movw	r30, r0
 a0c:	72 9f       	mul	r23, r18
 a0e:	bb 27       	eor	r27, r27
 a10:	f0 0d       	add	r31, r0
 a12:	b1 1d       	adc	r27, r1
 a14:	63 9f       	mul	r22, r19
 a16:	aa 27       	eor	r26, r26
 a18:	f0 0d       	add	r31, r0
 a1a:	b1 1d       	adc	r27, r1
 a1c:	aa 1f       	adc	r26, r26
 a1e:	64 9f       	mul	r22, r20
 a20:	66 27       	eor	r22, r22
 a22:	b0 0d       	add	r27, r0
 a24:	a1 1d       	adc	r26, r1
 a26:	66 1f       	adc	r22, r22
 a28:	82 9f       	mul	r24, r18
 a2a:	22 27       	eor	r18, r18
 a2c:	b0 0d       	add	r27, r0
 a2e:	a1 1d       	adc	r26, r1
 a30:	62 1f       	adc	r22, r18
 a32:	73 9f       	mul	r23, r19
 a34:	b0 0d       	add	r27, r0
 a36:	a1 1d       	adc	r26, r1
 a38:	62 1f       	adc	r22, r18
 a3a:	83 9f       	mul	r24, r19
 a3c:	a0 0d       	add	r26, r0
 a3e:	61 1d       	adc	r22, r1
 a40:	22 1f       	adc	r18, r18
 a42:	74 9f       	mul	r23, r20
 a44:	33 27       	eor	r19, r19
 a46:	a0 0d       	add	r26, r0
 a48:	61 1d       	adc	r22, r1
 a4a:	23 1f       	adc	r18, r19
 a4c:	84 9f       	mul	r24, r20
 a4e:	60 0d       	add	r22, r0
 a50:	21 1d       	adc	r18, r1
 a52:	82 2f       	mov	r24, r18
 a54:	76 2f       	mov	r23, r22
 a56:	6a 2f       	mov	r22, r26
 a58:	11 24       	eor	r1, r1
 a5a:	9f 57       	subi	r25, 0x7F	; 127
 a5c:	50 40       	sbci	r21, 0x00	; 0
 a5e:	9a f0       	brmi	.+38     	; 0xa86 <__mulsf3_pse+0x88>
 a60:	f1 f0       	breq	.+60     	; 0xa9e <__mulsf3_pse+0xa0>
 a62:	88 23       	and	r24, r24
 a64:	4a f0       	brmi	.+18     	; 0xa78 <__mulsf3_pse+0x7a>
 a66:	ee 0f       	add	r30, r30
 a68:	ff 1f       	adc	r31, r31
 a6a:	bb 1f       	adc	r27, r27
 a6c:	66 1f       	adc	r22, r22
 a6e:	77 1f       	adc	r23, r23
 a70:	88 1f       	adc	r24, r24
 a72:	91 50       	subi	r25, 0x01	; 1
 a74:	50 40       	sbci	r21, 0x00	; 0
 a76:	a9 f7       	brne	.-22     	; 0xa62 <__mulsf3_pse+0x64>
 a78:	9e 3f       	cpi	r25, 0xFE	; 254
 a7a:	51 05       	cpc	r21, r1
 a7c:	80 f0       	brcs	.+32     	; 0xa9e <__mulsf3_pse+0xa0>
 a7e:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
 a82:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
 a86:	5f 3f       	cpi	r21, 0xFF	; 255
 a88:	e4 f3       	brlt	.-8      	; 0xa82 <__mulsf3_pse+0x84>
 a8a:	98 3e       	cpi	r25, 0xE8	; 232
 a8c:	d4 f3       	brlt	.-12     	; 0xa82 <__mulsf3_pse+0x84>
 a8e:	86 95       	lsr	r24
 a90:	77 95       	ror	r23
 a92:	67 95       	ror	r22
 a94:	b7 95       	ror	r27
 a96:	f7 95       	ror	r31
 a98:	e7 95       	ror	r30
 a9a:	9f 5f       	subi	r25, 0xFF	; 255
 a9c:	c1 f7       	brne	.-16     	; 0xa8e <__mulsf3_pse+0x90>
 a9e:	fe 2b       	or	r31, r30
 aa0:	88 0f       	add	r24, r24
 aa2:	91 1d       	adc	r25, r1
 aa4:	96 95       	lsr	r25
 aa6:	87 95       	ror	r24
 aa8:	97 f9       	bld	r25, 7
 aaa:	08 95       	ret

00000aac <pow>:
 aac:	fa 01       	movw	r30, r20
 aae:	ee 0f       	add	r30, r30
 ab0:	ff 1f       	adc	r31, r31
 ab2:	30 96       	adiw	r30, 0x00	; 0
 ab4:	21 05       	cpc	r18, r1
 ab6:	31 05       	cpc	r19, r1
 ab8:	a1 f1       	breq	.+104    	; 0xb22 <pow+0x76>
 aba:	61 15       	cp	r22, r1
 abc:	71 05       	cpc	r23, r1
 abe:	61 f4       	brne	.+24     	; 0xad8 <pow+0x2c>
 ac0:	80 38       	cpi	r24, 0x80	; 128
 ac2:	bf e3       	ldi	r27, 0x3F	; 63
 ac4:	9b 07       	cpc	r25, r27
 ac6:	49 f1       	breq	.+82     	; 0xb1a <pow+0x6e>
 ac8:	68 94       	set
 aca:	90 38       	cpi	r25, 0x80	; 128
 acc:	81 05       	cpc	r24, r1
 ace:	61 f0       	breq	.+24     	; 0xae8 <pow+0x3c>
 ad0:	80 38       	cpi	r24, 0x80	; 128
 ad2:	bf ef       	ldi	r27, 0xFF	; 255
 ad4:	9b 07       	cpc	r25, r27
 ad6:	41 f0       	breq	.+16     	; 0xae8 <pow+0x3c>
 ad8:	99 23       	and	r25, r25
 ada:	4a f5       	brpl	.+82     	; 0xb2e <pow+0x82>
 adc:	ff 3f       	cpi	r31, 0xFF	; 255
 ade:	e1 05       	cpc	r30, r1
 ae0:	31 05       	cpc	r19, r1
 ae2:	21 05       	cpc	r18, r1
 ae4:	19 f1       	breq	.+70     	; 0xb2c <pow+0x80>
 ae6:	e8 94       	clt
 ae8:	08 94       	sec
 aea:	e7 95       	ror	r30
 aec:	d9 01       	movw	r26, r18
 aee:	aa 23       	and	r26, r26
 af0:	29 f4       	brne	.+10     	; 0xafc <pow+0x50>
 af2:	ab 2f       	mov	r26, r27
 af4:	be 2f       	mov	r27, r30
 af6:	f8 5f       	subi	r31, 0xF8	; 248
 af8:	d0 f3       	brcs	.-12     	; 0xaee <pow+0x42>
 afa:	10 c0       	rjmp	.+32     	; 0xb1c <pow+0x70>
 afc:	ff 5f       	subi	r31, 0xFF	; 255
 afe:	70 f4       	brcc	.+28     	; 0xb1c <pow+0x70>
 b00:	a6 95       	lsr	r26
 b02:	e0 f7       	brcc	.-8      	; 0xafc <pow+0x50>
 b04:	f7 39       	cpi	r31, 0x97	; 151
 b06:	50 f0       	brcs	.+20     	; 0xb1c <pow+0x70>
 b08:	19 f0       	breq	.+6      	; 0xb10 <pow+0x64>
 b0a:	ff 3a       	cpi	r31, 0xAF	; 175
 b0c:	38 f4       	brcc	.+14     	; 0xb1c <pow+0x70>
 b0e:	9f 77       	andi	r25, 0x7F	; 127
 b10:	9f 93       	push	r25
 b12:	0d d0       	rcall	.+26     	; 0xb2e <pow+0x82>
 b14:	0f 90       	pop	r0
 b16:	07 fc       	sbrc	r0, 7
 b18:	90 58       	subi	r25, 0x80	; 128
 b1a:	08 95       	ret
 b1c:	46 f0       	brts	.+16     	; 0xb2e <pow+0x82>
 b1e:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>
 b22:	60 e0       	ldi	r22, 0x00	; 0
 b24:	70 e0       	ldi	r23, 0x00	; 0
 b26:	80 e8       	ldi	r24, 0x80	; 128
 b28:	9f e3       	ldi	r25, 0x3F	; 63
 b2a:	08 95       	ret
 b2c:	4f e7       	ldi	r20, 0x7F	; 127
 b2e:	9f 77       	andi	r25, 0x7F	; 127
 b30:	5f 93       	push	r21
 b32:	4f 93       	push	r20
 b34:	3f 93       	push	r19
 b36:	2f 93       	push	r18
 b38:	0e 94 51 06 	call	0xca2	; 0xca2 <log>
 b3c:	2f 91       	pop	r18
 b3e:	3f 91       	pop	r19
 b40:	4f 91       	pop	r20
 b42:	5f 91       	pop	r21
 b44:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__mulsf3>
 b48:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <exp>
 b4c:	29 f4       	brne	.+10     	; 0xb58 <pow+0xac>
 b4e:	16 f0       	brts	.+4      	; 0xb54 <pow+0xa8>
 b50:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
 b54:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__fp_zero>
 b58:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>

00000b5c <exp>:
 b5c:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_splitA>
 b60:	a8 f3       	brcs	.-22     	; 0xb4c <pow+0xa0>
 b62:	96 38       	cpi	r25, 0x86	; 134
 b64:	a0 f7       	brcc	.-24     	; 0xb4e <pow+0xa2>
 b66:	07 f8       	bld	r0, 7
 b68:	0f 92       	push	r0
 b6a:	e8 94       	clt
 b6c:	2b e3       	ldi	r18, 0x3B	; 59
 b6e:	3a ea       	ldi	r19, 0xAA	; 170
 b70:	48 eb       	ldi	r20, 0xB8	; 184
 b72:	5f e7       	ldi	r21, 0x7F	; 127
 b74:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__mulsf3_pse>
 b78:	0f 92       	push	r0
 b7a:	0f 92       	push	r0
 b7c:	0f 92       	push	r0
 b7e:	4d b7       	in	r20, 0x3d	; 61
 b80:	5e b7       	in	r21, 0x3e	; 62
 b82:	0f 92       	push	r0
 b84:	0e 94 99 06 	call	0xd32	; 0xd32 <modf>
 b88:	ec e7       	ldi	r30, 0x7C	; 124
 b8a:	f0 e0       	ldi	r31, 0x00	; 0
 b8c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_powser>
 b90:	4f 91       	pop	r20
 b92:	5f 91       	pop	r21
 b94:	ef 91       	pop	r30
 b96:	ff 91       	pop	r31
 b98:	e5 95       	asr	r30
 b9a:	ee 1f       	adc	r30, r30
 b9c:	ff 1f       	adc	r31, r31
 b9e:	49 f0       	breq	.+18     	; 0xbb2 <exp+0x56>
 ba0:	fe 57       	subi	r31, 0x7E	; 126
 ba2:	e0 68       	ori	r30, 0x80	; 128
 ba4:	44 27       	eor	r20, r20
 ba6:	ee 0f       	add	r30, r30
 ba8:	44 1f       	adc	r20, r20
 baa:	fa 95       	dec	r31
 bac:	e1 f7       	brne	.-8      	; 0xba6 <exp+0x4a>
 bae:	41 95       	neg	r20
 bb0:	55 0b       	sbc	r21, r21
 bb2:	0e 94 13 06 	call	0xc26	; 0xc26 <ldexp>
 bb6:	0f 90       	pop	r0
 bb8:	07 fe       	sbrs	r0, 7
 bba:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <inverse>
 bbe:	08 95       	ret

00000bc0 <__fp_powser>:
 bc0:	df 93       	push	r29
 bc2:	cf 93       	push	r28
 bc4:	1f 93       	push	r17
 bc6:	0f 93       	push	r16
 bc8:	ff 92       	push	r15
 bca:	ef 92       	push	r14
 bcc:	df 92       	push	r13
 bce:	7b 01       	movw	r14, r22
 bd0:	8c 01       	movw	r16, r24
 bd2:	68 94       	set
 bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <__fp_powser+0x22>
 bd6:	da 2e       	mov	r13, r26
 bd8:	ef 01       	movw	r28, r30
 bda:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3x>
 bde:	fe 01       	movw	r30, r28
 be0:	e8 94       	clt
 be2:	a5 91       	lpm	r26, Z+
 be4:	25 91       	lpm	r18, Z+
 be6:	35 91       	lpm	r19, Z+
 be8:	45 91       	lpm	r20, Z+
 bea:	55 91       	lpm	r21, Z+
 bec:	a6 f3       	brts	.-24     	; 0xbd6 <__fp_powser+0x16>
 bee:	ef 01       	movw	r28, r30
 bf0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__addsf3x>
 bf4:	fe 01       	movw	r30, r28
 bf6:	97 01       	movw	r18, r14
 bf8:	a8 01       	movw	r20, r16
 bfa:	da 94       	dec	r13
 bfc:	69 f7       	brne	.-38     	; 0xbd8 <__fp_powser+0x18>
 bfe:	df 90       	pop	r13
 c00:	ef 90       	pop	r14
 c02:	ff 90       	pop	r15
 c04:	0f 91       	pop	r16
 c06:	1f 91       	pop	r17
 c08:	cf 91       	pop	r28
 c0a:	df 91       	pop	r29
 c0c:	08 95       	ret

00000c0e <inverse>:
 c0e:	9b 01       	movw	r18, r22
 c10:	ac 01       	movw	r20, r24
 c12:	60 e0       	ldi	r22, 0x00	; 0
 c14:	70 e0       	ldi	r23, 0x00	; 0
 c16:	80 e8       	ldi	r24, 0x80	; 128
 c18:	9f e3       	ldi	r25, 0x3F	; 63
 c1a:	0c 94 b3 03 	jmp	0x766	; 0x766 <__divsf3>
 c1e:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>
 c22:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_mpack>

00000c26 <ldexp>:
 c26:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_splitA>
 c2a:	d8 f3       	brcs	.-10     	; 0xc22 <inverse+0x14>
 c2c:	99 23       	and	r25, r25
 c2e:	c9 f3       	breq	.-14     	; 0xc22 <inverse+0x14>
 c30:	94 0f       	add	r25, r20
 c32:	51 1d       	adc	r21, r1
 c34:	a3 f3       	brvs	.-24     	; 0xc1e <inverse+0x10>
 c36:	91 50       	subi	r25, 0x01	; 1
 c38:	50 40       	sbci	r21, 0x00	; 0
 c3a:	94 f0       	brlt	.+36     	; 0xc60 <ldexp+0x3a>
 c3c:	59 f0       	breq	.+22     	; 0xc54 <ldexp+0x2e>
 c3e:	88 23       	and	r24, r24
 c40:	32 f0       	brmi	.+12     	; 0xc4e <ldexp+0x28>
 c42:	66 0f       	add	r22, r22
 c44:	77 1f       	adc	r23, r23
 c46:	88 1f       	adc	r24, r24
 c48:	91 50       	subi	r25, 0x01	; 1
 c4a:	50 40       	sbci	r21, 0x00	; 0
 c4c:	c1 f7       	brne	.-16     	; 0xc3e <ldexp+0x18>
 c4e:	9e 3f       	cpi	r25, 0xFE	; 254
 c50:	51 05       	cpc	r21, r1
 c52:	2c f7       	brge	.-54     	; 0xc1e <inverse+0x10>
 c54:	88 0f       	add	r24, r24
 c56:	91 1d       	adc	r25, r1
 c58:	96 95       	lsr	r25
 c5a:	87 95       	ror	r24
 c5c:	97 f9       	bld	r25, 7
 c5e:	08 95       	ret
 c60:	5f 3f       	cpi	r21, 0xFF	; 255
 c62:	ac f0       	brlt	.+42     	; 0xc8e <ldexp+0x68>
 c64:	98 3e       	cpi	r25, 0xE8	; 232
 c66:	9c f0       	brlt	.+38     	; 0xc8e <ldexp+0x68>
 c68:	bb 27       	eor	r27, r27
 c6a:	86 95       	lsr	r24
 c6c:	77 95       	ror	r23
 c6e:	67 95       	ror	r22
 c70:	b7 95       	ror	r27
 c72:	08 f4       	brcc	.+2      	; 0xc76 <ldexp+0x50>
 c74:	b1 60       	ori	r27, 0x01	; 1
 c76:	93 95       	inc	r25
 c78:	c1 f7       	brne	.-16     	; 0xc6a <ldexp+0x44>
 c7a:	bb 0f       	add	r27, r27
 c7c:	58 f7       	brcc	.-42     	; 0xc54 <ldexp+0x2e>
 c7e:	11 f4       	brne	.+4      	; 0xc84 <ldexp+0x5e>
 c80:	60 ff       	sbrs	r22, 0
 c82:	e8 cf       	rjmp	.-48     	; 0xc54 <ldexp+0x2e>
 c84:	6f 5f       	subi	r22, 0xFF	; 255
 c86:	7f 4f       	sbci	r23, 0xFF	; 255
 c88:	8f 4f       	sbci	r24, 0xFF	; 255
 c8a:	9f 4f       	sbci	r25, 0xFF	; 255
 c8c:	e3 cf       	rjmp	.-58     	; 0xc54 <ldexp+0x2e>
 c8e:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_szero>
 c92:	16 f0       	brts	.+4      	; 0xc98 <ldexp+0x72>
 c94:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_mpack>
 c98:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_nan>
 c9c:	68 94       	set
 c9e:	0c 94 98 04 	jmp	0x930	; 0x930 <__fp_inf>

00000ca2 <log>:
 ca2:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_splitA>
 ca6:	a8 f3       	brcs	.-22     	; 0xc92 <ldexp+0x6c>
 ca8:	99 23       	and	r25, r25
 caa:	c1 f3       	breq	.-16     	; 0xc9c <ldexp+0x76>
 cac:	ae f3       	brts	.-22     	; 0xc98 <ldexp+0x72>
 cae:	df 93       	push	r29
 cb0:	cf 93       	push	r28
 cb2:	1f 93       	push	r17
 cb4:	0f 93       	push	r16
 cb6:	ff 92       	push	r15
 cb8:	c9 2f       	mov	r28, r25
 cba:	dd 27       	eor	r29, r29
 cbc:	88 23       	and	r24, r24
 cbe:	2a f0       	brmi	.+10     	; 0xcca <log+0x28>
 cc0:	21 97       	sbiw	r28, 0x01	; 1
 cc2:	66 0f       	add	r22, r22
 cc4:	77 1f       	adc	r23, r23
 cc6:	88 1f       	adc	r24, r24
 cc8:	da f7       	brpl	.-10     	; 0xcc0 <log+0x1e>
 cca:	20 e0       	ldi	r18, 0x00	; 0
 ccc:	30 e0       	ldi	r19, 0x00	; 0
 cce:	40 e8       	ldi	r20, 0x80	; 128
 cd0:	5f eb       	ldi	r21, 0xBF	; 191
 cd2:	9f e3       	ldi	r25, 0x3F	; 63
 cd4:	88 39       	cpi	r24, 0x98	; 152
 cd6:	20 f0       	brcs	.+8      	; 0xce0 <log+0x3e>
 cd8:	80 3e       	cpi	r24, 0xE0	; 224
 cda:	38 f0       	brcs	.+14     	; 0xcea <log+0x48>
 cdc:	21 96       	adiw	r28, 0x01	; 1
 cde:	8f 77       	andi	r24, 0x7F	; 127
 ce0:	0e 94 47 03 	call	0x68e	; 0x68e <__addsf3>
 ce4:	e4 ea       	ldi	r30, 0xA4	; 164
 ce6:	f0 e0       	ldi	r31, 0x00	; 0
 ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <log+0x50>
 cea:	0e 94 47 03 	call	0x68e	; 0x68e <__addsf3>
 cee:	e1 ed       	ldi	r30, 0xD1	; 209
 cf0:	f0 e0       	ldi	r31, 0x00	; 0
 cf2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__fp_powser>
 cf6:	8b 01       	movw	r16, r22
 cf8:	be 01       	movw	r22, r28
 cfa:	ec 01       	movw	r28, r24
 cfc:	fb 2e       	mov	r15, r27
 cfe:	6f 57       	subi	r22, 0x7F	; 127
 d00:	71 09       	sbc	r23, r1
 d02:	75 95       	asr	r23
 d04:	77 1f       	adc	r23, r23
 d06:	88 0b       	sbc	r24, r24
 d08:	99 0b       	sbc	r25, r25
 d0a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatsisf>
 d0e:	28 e1       	ldi	r18, 0x18	; 24
 d10:	32 e7       	ldi	r19, 0x72	; 114
 d12:	41 e3       	ldi	r20, 0x31	; 49
 d14:	5f e3       	ldi	r21, 0x3F	; 63
 d16:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__mulsf3x>
 d1a:	af 2d       	mov	r26, r15
 d1c:	98 01       	movw	r18, r16
 d1e:	ae 01       	movw	r20, r28
 d20:	ff 90       	pop	r15
 d22:	0f 91       	pop	r16
 d24:	1f 91       	pop	r17
 d26:	cf 91       	pop	r28
 d28:	df 91       	pop	r29
 d2a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__addsf3x>
 d2e:	0c 94 af 04 	jmp	0x95e	; 0x95e <__fp_round>

00000d32 <modf>:
 d32:	fa 01       	movw	r30, r20
 d34:	dc 01       	movw	r26, r24
 d36:	aa 0f       	add	r26, r26
 d38:	bb 1f       	adc	r27, r27
 d3a:	9b 01       	movw	r18, r22
 d3c:	ac 01       	movw	r20, r24
 d3e:	bf 57       	subi	r27, 0x7F	; 127
 d40:	28 f4       	brcc	.+10     	; 0xd4c <modf+0x1a>
 d42:	22 27       	eor	r18, r18
 d44:	33 27       	eor	r19, r19
 d46:	44 27       	eor	r20, r20
 d48:	50 78       	andi	r21, 0x80	; 128
 d4a:	20 c0       	rjmp	.+64     	; 0xd8c <modf+0x5a>
 d4c:	b7 51       	subi	r27, 0x17	; 23
 d4e:	90 f4       	brcc	.+36     	; 0xd74 <modf+0x42>
 d50:	ab 2f       	mov	r26, r27
 d52:	00 24       	eor	r0, r0
 d54:	46 95       	lsr	r20
 d56:	37 95       	ror	r19
 d58:	27 95       	ror	r18
 d5a:	01 1c       	adc	r0, r1
 d5c:	a3 95       	inc	r26
 d5e:	d2 f3       	brmi	.-12     	; 0xd54 <modf+0x22>
 d60:	00 20       	and	r0, r0
 d62:	71 f0       	breq	.+28     	; 0xd80 <modf+0x4e>
 d64:	22 0f       	add	r18, r18
 d66:	33 1f       	adc	r19, r19
 d68:	44 1f       	adc	r20, r20
 d6a:	b3 95       	inc	r27
 d6c:	da f3       	brmi	.-10     	; 0xd64 <modf+0x32>
 d6e:	0e d0       	rcall	.+28     	; 0xd8c <modf+0x5a>
 d70:	0c 94 46 03 	jmp	0x68c	; 0x68c <__subsf3>
 d74:	61 30       	cpi	r22, 0x01	; 1
 d76:	71 05       	cpc	r23, r1
 d78:	a0 e8       	ldi	r26, 0x80	; 128
 d7a:	8a 07       	cpc	r24, r26
 d7c:	b9 46       	sbci	r27, 0x69	; 105
 d7e:	30 f4       	brcc	.+12     	; 0xd8c <modf+0x5a>
 d80:	9b 01       	movw	r18, r22
 d82:	ac 01       	movw	r20, r24
 d84:	66 27       	eor	r22, r22
 d86:	77 27       	eor	r23, r23
 d88:	88 27       	eor	r24, r24
 d8a:	90 78       	andi	r25, 0x80	; 128
 d8c:	30 96       	adiw	r30, 0x00	; 0
 d8e:	21 f0       	breq	.+8      	; 0xd98 <modf+0x66>
 d90:	20 83       	st	Z, r18
 d92:	31 83       	std	Z+1, r19	; 0x01
 d94:	42 83       	std	Z+2, r20	; 0x02
 d96:	53 83       	std	Z+3, r21	; 0x03
 d98:	08 95       	ret

00000d9a <__fp_mpack>:
 d9a:	9f 3f       	cpi	r25, 0xFF	; 255
 d9c:	31 f0       	breq	.+12     	; 0xdaa <__fp_mpack_finite+0xc>

00000d9e <__fp_mpack_finite>:
 d9e:	91 50       	subi	r25, 0x01	; 1
 da0:	20 f4       	brcc	.+8      	; 0xdaa <__fp_mpack_finite+0xc>
 da2:	87 95       	ror	r24
 da4:	77 95       	ror	r23
 da6:	67 95       	ror	r22
 da8:	b7 95       	ror	r27
 daa:	88 0f       	add	r24, r24
 dac:	91 1d       	adc	r25, r1
 dae:	96 95       	lsr	r25
 db0:	87 95       	ror	r24
 db2:	97 f9       	bld	r25, 7
 db4:	08 95       	ret

00000db6 <__divmodhi4>:
 db6:	97 fb       	bst	r25, 7
 db8:	07 2e       	mov	r0, r23
 dba:	16 f4       	brtc	.+4      	; 0xdc0 <__divmodhi4+0xa>
 dbc:	00 94       	com	r0
 dbe:	07 d0       	rcall	.+14     	; 0xdce <__divmodhi4_neg1>
 dc0:	77 fd       	sbrc	r23, 7
 dc2:	09 d0       	rcall	.+18     	; 0xdd6 <__divmodhi4_neg2>
 dc4:	0e 94 ef 06 	call	0xdde	; 0xdde <__udivmodhi4>
 dc8:	07 fc       	sbrc	r0, 7
 dca:	05 d0       	rcall	.+10     	; 0xdd6 <__divmodhi4_neg2>
 dcc:	3e f4       	brtc	.+14     	; 0xddc <__divmodhi4_exit>

00000dce <__divmodhi4_neg1>:
 dce:	90 95       	com	r25
 dd0:	81 95       	neg	r24
 dd2:	9f 4f       	sbci	r25, 0xFF	; 255
 dd4:	08 95       	ret

00000dd6 <__divmodhi4_neg2>:
 dd6:	70 95       	com	r23
 dd8:	61 95       	neg	r22
 dda:	7f 4f       	sbci	r23, 0xFF	; 255

00000ddc <__divmodhi4_exit>:
 ddc:	08 95       	ret

00000dde <__udivmodhi4>:
 dde:	aa 1b       	sub	r26, r26
 de0:	bb 1b       	sub	r27, r27
 de2:	51 e1       	ldi	r21, 0x11	; 17
 de4:	07 c0       	rjmp	.+14     	; 0xdf4 <__udivmodhi4_ep>

00000de6 <__udivmodhi4_loop>:
 de6:	aa 1f       	adc	r26, r26
 de8:	bb 1f       	adc	r27, r27
 dea:	a6 17       	cp	r26, r22
 dec:	b7 07       	cpc	r27, r23
 dee:	10 f0       	brcs	.+4      	; 0xdf4 <__udivmodhi4_ep>
 df0:	a6 1b       	sub	r26, r22
 df2:	b7 0b       	sbc	r27, r23

00000df4 <__udivmodhi4_ep>:
 df4:	88 1f       	adc	r24, r24
 df6:	99 1f       	adc	r25, r25
 df8:	5a 95       	dec	r21
 dfa:	a9 f7       	brne	.-22     	; 0xde6 <__udivmodhi4_loop>
 dfc:	80 95       	com	r24
 dfe:	90 95       	com	r25
 e00:	bc 01       	movw	r22, r24
 e02:	cd 01       	movw	r24, r26
 e04:	08 95       	ret

00000e06 <strcmp>:
 e06:	fb 01       	movw	r30, r22
 e08:	dc 01       	movw	r26, r24
 e0a:	8d 91       	ld	r24, X+
 e0c:	01 90       	ld	r0, Z+
 e0e:	80 19       	sub	r24, r0
 e10:	01 10       	cpse	r0, r1
 e12:	d9 f3       	breq	.-10     	; 0xe0a <strcmp+0x4>
 e14:	99 0b       	sbc	r25, r25
 e16:	08 95       	ret

00000e18 <_exit>:
 e18:	f8 94       	cli

00000e1a <__stop_program>:
 e1a:	ff cf       	rjmp	.-2      	; 0xe1a <__stop_program>
